name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  # PostgresSQL Env Vars: The 'services' block below will also use these for the postgres container
  POSTGRES_DB: test_db
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: password
  DATABASE_URL: postgresql://runner:password@localhost:5432/test_db # Adjust if the app uses a different port/host from services


jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ] # Test on both Linux and macOS

    runs-on: ${{ matrix.os }}

    # Service containers for databases (PostgresSQL)
    # This starts a PostgresSQL container alongside your job.
    services:
      postgres:
        image: postgres:15 # Specify a version you need
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432 # Maps container port 5432 to host port 5432
        # Health checks to wait until Postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo registry and index
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # Or your specific toolchain version
          profile: minimal

      # --- PostgresSQL Setup (Linux & macOS) ---
      # The 'services' block above handles PostgresSQL for both OS.
      - name: Install PostgresSQL Client (OS & Linux)
        #        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends postgresql-client
          - name: Install PostgresSQL Client (macOS)
            if: runner.os == 'macOS'
            run: |
              brew install libpq # Provides psql client
              echo "/opt/homebrew/opt/libpq/bin" >> $GITHUB_PATH # For Apple Silicon
              echo "/usr/local/opt/libpq/bin" >> $GITHUB_PATH # For Intel Macs

      #      - name: Install Cassandra C++ Driver (macOS)
      #        if: runner.os == 'macOS'
      #        run: |
      #          echo "Installing Cassandra C++ Driver on macOS..."
      #          brew update || echo "Brew update failed, continuing..." # Sometimes brew update can be flaky
      #          brew install cassandra-cpp-driver libuv openssl pkg-config cmake
      #          echo "Finished: Install Cassandra C++ Driver (macOS)"

      - name: Install and Start Cassandra (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Installing Cassandra on macOS..."
          brew install cassandra
          # Ensure Java is correctly configured if brew cassandra requires it
          # brew services start cassandra
          # Starting with brew services can be tricky in non-interactive CI.
          # Let's try running it directly in the background.
          cassandra -f &
          
          echo "Waiting for Cassandra to start..."
          timeout=180 # 3 minutes timeout for macOS, can be slower
          interval=10
          elapsed=0
          # On macOS, nodetool might not be immediately on PATH after brew install
          # Try to find it if brew installed it in a standard location
          NODETOOL_PATH=""
          if [ -x "$(brew --prefix cassandra)/bin/nodetool" ]; then
            NODETOOL_PATH="$(brew --prefix cassandra)/bin/nodetool"
          elif [ -x "/opt/homebrew/bin/nodetool" ]; then # Apple Silicon default
             NODETOOL_PATH="/opt/homebrew/bin/nodetool"
          elif [ -x "/usr/local/bin/nodetool" ]; then # Intel Macs default
             NODETOOL_PATH="/usr/local/bin/nodetool"
          else
            echo "nodetool not found in expected brew paths!"
            # Attempt to use it directly, hoping it's in PATH
            NODETOOL_PATH="nodetool"
          fi
          
          while ! $NODETOOL_PATH status > /dev/null 2>&1; do
            if [ $elapsed -ge $timeout ]; then
              echo "Cassandra did not start within $timeout seconds."
              $NODETOOL_PATH status # Print status for debugging
              exit 1
            fi
            echo "Cassandra not up yet, waiting ($elapsed/$timeout s)..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Cassandra started successfully."
          $NODETOOL_PATH status
          
      - name: Install Cassandra C++ Driver (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Installing Cassandra C++ Driver on macOS..."
          brew update || echo "Brew update failed, continuing..." # Sometimes brew update can be flaky
          brew install cassandra-cpp-driver libuv openssl pkg-config cmake
          echo "Finished: Install Cassandra C++ Driver (macOS)"

      - name: Set Build Environment Variables (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Setting macOS build environment variables..."
          echo "LIBRARY_PATH=$(brew --prefix)/lib:$(brew --prefix openssl)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPATH=$(brew --prefix)/include:$(brew --prefix openssl)/include:$CPATH" >> $GITHUB_ENV
          # For OpenSSL, specifically for Homebrew installations
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV
          echo "*** macOS ENV Vars Set ***"

      - name: Build Project
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose
