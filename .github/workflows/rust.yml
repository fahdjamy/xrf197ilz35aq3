name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ] # Test on both Linux and macOS

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # caching Cargo dependencies: https://github.com/actions/cache
      - name: Cache Cargo registry and index
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # Later: the app's your specific toolchain version

      - name: Install Cassandra C++ Driver (Linux)
        if: runner.os == 'Linux'
        run: |
          # 1. Install prerequisites for managing HTTPS apt sources and GPG keys
          #    (ca-certificates, curl, gnupg are often already present on GitHub runners but good to ensure)
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends apt-transport-https ca-certificates curl gnupg lsb-release
          
          # 2. Download DataStax GPG key, dearmor it, and store it as a .gpg file
          #    NOTE: ALWAYS verify GPG key URLs from the official DataStax documentation, as they can change.
          #    The URL used here is based on previous common practice.
          curl -fsSL https://downloads.datastax.com/cpp-driver/repo/repo_key | sudo gpg --dearmor -o /usr/share/keyrings/datastax-archive-keyring.gpg
          
          # 3. Add DataStax repository, specifying the architecture and the keyring for signing
          #    $(dpkg --print-architecture) gets the architecture (e.g., amd64)
          #    $(lsb_release -sc) gets the codename of the Ubuntu version (e.g., focal, jammy)
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/datastax-archive-keyring.gpg] https://downloads.datastax.com/cpp-driver/ubuntu/$(lsb_release -sc) $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/datastax.sources.list > /dev/null
          
          # 4. Update package list again after adding new repository and its key
          sudo apt-get update -qq
          
          # 5. Now install the driver and its dependencies
          sudo apt-get install -y --no-install-recommends libdatastax-cpp-driver-dev libuv1-dev libssl-dev pkg-config

      - name: Install Cassandra C++ Driver (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update # Ensure brew is updated
          # Install the driver and its dependencies
          brew install cassandra-cpp-driver libuv openssl pkg-config

      - name: Set Build Environment Variables (Linux)
        if: runner.os == 'Linux'
        run: |
          # Use crate-specific vars if you found them (replace VAR_NAME):
          # echo "CASSANDRA_SYS_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          # echo "CASSANDRA_SYS_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          
          # ---- OR ---- Use general variables (adjust paths if needed for specific Linux distros)
          echo "LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPATH=/usr/include:$CPATH" >> $GITHUB_ENV
          echo "*** Linux ENV Vars Set ***" # Add for debugging

      - name: Set Build Environment Variables (macOS)
        if: runner.os == 'macOS'
        run: |
          # Use crate-specific vars if you found them (replace VAR_NAME):
          # echo "CASSANDRA_SYS_LIB_DIR=$(brew --prefix)/lib" >> $GITHUB_ENV
          # echo "CASSANDRA_SYS_INCLUDE_DIR=$(brew --prefix)/include" >> $GITHUB_ENV
          
          # ---- OR ---- Use general variables
          echo "LIBRARY_PATH=$(brew --prefix)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPATH=$(brew --prefix)/include:$CPATH" >> $GITHUB_ENV
          echo "*** macOS ENV Vars Set ***" # Add for debugging

      - name: Build Project
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose
