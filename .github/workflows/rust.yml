name: Rust

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

env:
  CARGO_TERM_COLOR: always
  # Postgres-SQL Env Vars
  POSTGRES_DB: test_db
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: password
  DATABASE_URL: postgresql://runner:password@localhost:5432/test_db

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ ubuntu-22.04 ] # Matrix with only ubuntu for now
      fail-fast: false # Optional: set to false if you want all matrix jobs to complete even if one fails

    # Use service containers to run databases, which is much more reliable
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        # Add a health check to wait until Postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      cassandra:
        image: cassandra:4.1
        ports:
          - 9042:9042

    runs-on: ${{ matrix.os }} # Use the OS from the matrix

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo registry and index
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install Dependencies & Build C++ Driver from Source
        run: |
          sudo apt-get update -y
          # Install build tools, clients, and base packages
          sudo apt-get install -y protobuf-compiler cmake pkg-config git postgresql-client \
            libuv1-dev libssl-dev libgssapi-krb5-2 gnupg
          
          # Add the Apache Cassandra repository to get 'cassandra-tools'
          echo "Adding Apache Cassandra repository..."
          curl -fL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x5E85B9AE0B84C041" | sudo apt-key add -
          echo "deb https://debian.cassandra.apache.org 41x main" | sudo tee /etc/apt/sources.list.d/cassandra.list > /dev/null
          
          # Update again after adding the new repo
          sudo apt-get update -y
          # Now install cassandra-tools
          sudo apt-get install -y cassandra-tools
          
          # Build the Cassandra C++ Driver from source to bypass network issues
          echo "Cloning and building Cassandra C++ driver from source..."
          git clone https://github.com/datastax/cpp-driver.git
          cd cpp-driver
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          # Ensure the shared library cache is updated
          sudo ldconfig

      - name: Wait for Cassandra to be ready
        run: |
          echo "Waiting for Cassandra service to start..."
          timeout=180
          interval=10
          elapsed=0
          while ! cqlsh -e "describe keyspaces" > /dev/null 2>&1; do
            if [ $elapsed -ge $timeout ]; then
              echo "Cassandra service did not become ready in $timeout seconds."
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Cassandra is ready."      

      # --- Run SQL Migrations ---
      - name: Run SQL Migrations (PostgresSQL)
        # This step assumes the migration tool uses the DATABASE_URL environment variable.
        run: |
          echo "Running PostgresSQL migrations... Attempting to run migrations with sqlx-cli ..."
          if ! command -v sqlx &> /dev/null
          then
            echo "sqlx-cli not found, installing..."
            cargo install sqlx-cli --no-default-features --features native-tls,postgres
            # Verify installation
            if ! command -v sqlx &> /dev/null
            then
              echo "Failed to install sqlx-cli."
              exit 1
            fi
          fi
          
          # Running migrations at root dir './migrations'
          sqlx migrate run --source ./migrations 
          
          # If you also have Cassandra schema setup/migrations, add those commands here.
          # Example: cqlsh -f ./path/to/cassandra_schema.cql || echo "Cassandra schema setup might have issues."

      # --- Build and Test ---
      - name: Build Project
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose
